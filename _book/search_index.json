[["index.html", "Best Coding Practices for R CoverPage", " Best Coding Practices for R Vikram Singh Rawat 2021-03-23 CoverPage Know the rules well, so you can break them effectively.  The Dalai Lama "],["intro.html", "Chapter 1 Introduction", " Chapter 1 Introduction The most damaging phrase in the language is: Its always been done that way.*.  Grace Hopper Did you try to read the title from the cover of the book? I could have done a thousand things to make it easier for you to read it. But this cover reminds me of how often we overlook simple things which are very crucial from the readers point of view. R is an excellent programming language its turing complete and doesnt lack anything for a production level code. It can be used in the entire data domain from APIs to dashboards to apps and much more. Trust the language and trust in yourself. Its a journey everyone has gone through and everyone must go through. R programmers have a bad reputation for not writing production level code. It stems from the fact that we mostly arent trained programmers. We tend to overlook things that are crucial from a programming standpoint. As R programmers we are often less inclined to write the code for production. Mostly we try to write scripts and when we are asked to deploy the same we just wrap it in a function and provide it to the IT team. I have been at the receiving end of these issues where I had to maintain a poorly written code; columns were referred by numbers, functions were dependent upon global environment variables, 50+ lines functions without arguement, poor naming conventions etc. I too am a self taught programmer and have gone through these hiccups of code deployment, code reviews and speed issues. World going forward will all be code and data. The sooner you learn these skills the better it is for you to have trust in your own programming skills. R is a huge language and I would like to share the little knowledge I have in the subject. I dont claim to be an expert but this book will guide you in the right path wherever possible. Most of the books about R programming language will tell you what are the possible ways to do one thing in R. This book will only tell you one way to do that thing correctly. I will try to write it as a dictionary as succinctly as possible. So that you can use it for references. Let the journey begin "],["folder.html", "Chapter 2 Folder Structure 2.1 Organizing files 2.2 Create Projects 2.3 Naming files 2.4 Folders Based on File-Type 2.5 Creating Sub-folders 2.6 Conclusion", " Chapter 2 Folder Structure 2.1 Organizing files The best way to organize your code is to write a package. Organizing your code is the first and foremost thing you should learn. Because as the project grows and multiple files are put into a folder it gets harder to navigate the code. A proper folder structure definitely helps in these times. I Just couldnt emphasis it enough that best way to organize your code is to write a package. But even when you are not planning to write a package. There are best practices to make it readable and make a smooth navigation. 2.2 Create Projects Its such a minor thing to say but I still till date see code like this: setwd(&quot;c://myproject_name/&quot;) It was a good practice like 5 - 6 years ago. Now Rstudio has a feature to create project. new project Once you create a project it is easier to manage your files and folders and its easier to give it somebody as well. It has virtually the same effect but then you can use Rstudio a little better. Its something I recommend to every user regardless of the skill level. 2.3 Naming files I data science most common problem is that we dont change the file names of excel or csv files provided by business people. And most of the time those file names are totally abbreviated with spaces in between and multiple cases like Total Sales Mike 202002-AZ1P2R.csv. This name is useful for the MIS or Business Analyst as they have a different way of organizing files then yours. They might do it because they have to keep a record of different people and have to provide it anytime asked. But as a Data Scientist your work is entirely different. You are not delivering files you are writing code. Let me reiterate this fact YOU ARE WRITING CODE. In most of the scenarios Data Science is more like programming less like science. Even though it has proportion of both of them. Using fundamentals of programming practices will help you out in long term. So change such file names to sales_data_mike_feb2020.csv or something similar. There are no right or wrong names just what makes more sense to a new user. There is a trick about naming conventions: use all lower case or upper case ( helps you in never forgetting the cases ) use underscore in between ( Because file names are mostly long Camel Or Pascal cases may confuse users) make the name as general as possible ( make sure a newcomer should be able to understand it without any problem) In choosing a name there are no wrong answers only confusing ones 2.4 Folders Based on File-Type A Very common practice is to keep different file types in different folder. One of the main mistake I see people writing code like this. DBI::dbGetQuery(conn, &quot; select count(*) as numbers, max(colname) as maxSome, min(colname) as minSome, from tablename group by col1, col2, col3 order by numbers &quot;) or codes like this. shiny::HTML( &quot; &lt;p&gt;At Mozilla, were a global community of&lt;/p&gt; &lt;ul&gt; &lt;!-- changed to list in the tutorial --&gt; &lt;li&gt;technologists&lt;/li&gt; &lt;li&gt;thinkers&lt;/li&gt; &lt;li&gt;builders&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;working together to keep the Internet alive and accessible, so people worldwide can be informed contributors and creators of the Web. We believe this act of human collaboration across an open platform is essential to individual growth and our collective future.&lt;/p&gt; &lt;p&gt;Read the &lt;a href=\\&quot;https://www.mozilla.org/en-US/about/manifesto/\\&quot;&gt;Mozilla Manifesto&lt;/a&gt; to learn even more about the values and principles that guide the pursuit of our mission.&lt;/p&gt; &quot; ) This is a bad coding style. Every time I see this type of code I realize that the person doesnt believe that either the code will change or It will be extended. There is nothing permanent in the programming neither code, nor frameworks and not even languages. If you keep this type of code in separate SQL files or html files you can easily edit them later, code will be more easier to read and there will be a separation of concern. Tomorrow if you need help in SQL or HTML, a UI designer or a Database designer can look into your code without getting bogged down in R code. It makes bringing more people to the team easier. 2.5 Creating Sub-folders On bigger projects simple folder structure tend to become more confusing. This is the main concern I have with the data folder every data scientist create and put all the files he has in that single folder. In these scenarios its better to have a sub-folder for different file types or may be different roles. Like you can create sub-folders based on file-types like CSVs, json, rds etc.. or you can even create sub-folders based on roles or needs Like all the data related to one tab or one functionality goes in one folder and so on There has to be a logical consistency in the folder structure. Its primarily for you to not get lost in your own folders that you created and secondary for people working with you to understand your code and help in places you need help. 2.6 Conclusion You have to create folders and everything has to be arranged in. Keep everything as organized as you keep your house. There are a certain principles that will help you in it. Create projects Name the files properly Create a file for different language create sub-folders wherever you fill necessary. "],["code.html", "Chapter 3 Code Structure 3.1 Create Sections 3.2 Order of Code 3.3 Conclusion", " Chapter 3 Code Structure Once you have arranged the files and folders in a logical way then comes the fact that the code itself should be arranged in such a way that it feels easy to go through. Always remember Code is read more often then its written. Your world should revolve around this line. If you delegate your work while leaving your firm to someone else than the person who is handling your code should be able to understand everything you were trying to do. You will be in that position someday and you would wish your colleagues must have done the same. Even if you arent sharing your code to somebody one day when you will return back to the project after say 7 to 8 months you will be surprised to see the mess you created back then. With this in mind hope this will help you in your journey. 3.1 Create Sections Rstudio gives you an ability to create section by pressing ( ctrl + shift + R ), or you can create one by adding 4 dashes (-) after a comment or 4 hash symbol (#) after a comment. # some comment ---- # some comment #### Both are valid syntax. you can name your section in the comment. Same rule applies for the Rmarkdown documents as well you should always name your code chunk. # ```{r chunkname, cache=TRUE} It also helps you jump between sections (Shift+Alt+J). You can easily switch between sections and fold them at will. It helps you not only in navigation but keeping a layout of the entire code as well. A 800+ line files will look something like this. code chunk It makes your code beautiful to look and makes it maintainable in long run. 3.2 Order of Code When you write code there are standard practices that are used across the domain and you should definitely use them. These are simple rules that most beginners arent concerned about but the more experience you gain the more you start to realize the latent power of code organization. Here are a simple tip you should use. Call your libraries on top of code Set all default variables or global options and all the path variables at the top of the code. Source all the code at the beginning Call all the data-files at the top In this exact order. This coherence keeps all your code easy to find. Most annoying thing in debugging someone else code is finding path variables laid out inside functions. Please dont ever do that. That is not a good practices. Take a look at one of my file code order If you think you will forget it. There is a golden rule you must remember. Put all the external dependencies on top of your code. Everything that I mentioned above is external to the code in the file. In exact order. Libraries are external to the file. path variables other files apart from one you are working is external as well. databases and CSV Just by doing this you will be able to navigate better in your code. There arent any hard and fast rules for this only logical and sensible ones. Feel free to come up with your own layout that helps you in your analysis journey. 3.3 Conclusion In this chapter we discussed how to structure your code to make it more meaningful to read and easier to debug. The key takeaways from this chapter is: Create sections to write beautiful and navigable code Put those sections in a logical order "],["func.html", "Chapter 4 Functions 4.1 Metadata or Information 4.2 Pass everything through parameters 4.3 Use Return Statement 4.4 Keep a consistency in Return Type 4.5 Use Sensible Names for parameters 4.6 use tryCatch 4.7 Write simple and unique functions 4.8 Conclusion", " Chapter 4 Functions I can not over emphasize the importance of functions. As a data scientist most of the time you will be writing functions. Only in couple of cases where you have to write complicated classes there too methods are nothing more than functions. Having solid grasp of best practices in functions is a must for everybody working in any language what-so-ever. Hopefully this chapter will help you in best coding practices for functions. 4.1 Metadata or Information As I mentioned in the previous chapter it is a good practice to create sections for everything you do in R. functions are no exception to the rule. But along with that there are a couple of information you should write along with the function. I worked in a few MNC where we had to write metadata of every function before writing it down. It makes it easier for code-reviewer to understand you code and for the entire team to collaborate in the project. Its good for personal projects too Let me give you an example of what I mean by this. functions metadata You can see that if you are working on large teams or may be in big corporate settings where anybody can be reassigned to a different project. This data helps by identifying who wrote what and why. Examples of some important tags can be : written by written on modified by modified on purpose descriptions You can create your own tags based on usecases and information needed for further scenarios. 4.2 Pass everything through parameters I have seen people writing functions with calling things from global environments. Take a look at the code below. foo &lt;- function(x){ return( x + y) } y &lt;- 10 foo(5) ## [1] 15 Here the value of foo is based on y which is not a part of the function instead its in global environment and function always have to search global environment for the object. consider these scenarios: bar &lt;- function(x, y){ y &lt;- y return( foo(x) ) } bar(5, 20) ## [1] 15 you would assume that the answer is 25 but its 15 because foo was created in the global environment and it will always look up value in global environment before anything else. This is called Lexical Scoping its okay if you dont know it. It is very confusing and could mess up your code at any point in time. I am an experienced R programmer I too have trouble getting my head around it. We can avoid all these situations by following the best coding practices that have been used in software industries for years. Function should be a self contained code which shouldnt be impacted by the outer world. Only is certain scenarios you allow to deviate from these rules but its a good coding practice none the less. now in the above example instead of relying on the global variable if I just had created a parameter for Y, my code would be simpler to write and easier to understand and I would not have to think about lexical scoping on every step. foo &lt;- function( x, y ){ return( x + y ) } bar &lt;- function( x, y ){ return( foo( x, y ) ) } bar(5, 20) ## [1] 25 Now this code returns 25 as we all expected and trust me the Y is still available in global environment but that doesnt impact the foo or bar at all. Now you can nest this function under multiple other functions and it will behave exactly like it should. There is a golden rule you should take away from this section. Avoid Global Variables at all costs. As much as possible pass everything through the parameters. That what they are for right !!! 4.3 Use Return Statement It is a very simple thing yet most of the R users never worry about it because R takes care of finer details for you. But return statements actually make your code easier to read. Suppose you have to review code return statement makes it easier to glance at the code and understand what is it doing. Almost all the programming languages are habitual with it. There are no good advantage I can tell you for a return statement other than readability. But just by following these practices R community as a whole could get more respect in programming community. So please use Return statements wherever possible. In Big MNC your code will never pass reviewer unless it has return statements. It also is good for functions that dont return anything you can just return true or false depending on the fact that the function ran without producing any error. Functions where you modify a data.table or where you change something in the database etc Its a standard practice in old programming languages like C++ and its a good practice indeed. We as a community should embrace these practices which will help us down the road. 4.4 Keep a consistency in Return Type Return type of a function should be consistent regardless of what happens in a code. You may assume this is so simple that it goes without saying who would in their sane mind return character vector instead of a numerical one and you would be right. But Things get complicated when people start to work in composite data types like Lists and Dataframes. Working with lists people get confused and forget this basic principle. I have seen function returning list of 2 elements on some conditions and 3 on other and 4 on some more. It makes it harder for users to work on those return values. Dont even get me started on dataframes. People write functions that do some magic stuff on dataframes and it sometimes return a dataframe of 10 columns, sometime 11 and sometime 8. Its such a common mistake to make. I understand if you are fetching a table from database and returning that same table via functions but during manipulations you must add empty columns or delete existing ones to make it consistent for the end user regardless of the conditions you have in the functions. 4.5 Use Sensible Names for parameters Yet another simple thing but because most of us including me come from non computer science background we have a tendency to use names like x, y, z, beta, theta, gamma, string etc in our function parameters. I too am guilty of doing it in above code for foo and bar functions and in general. Many good and well established libraries in R are guilty of this sin too But in long run these words dont make much sense. Its hard to maintain that code and its hard for user as well. Lets take an example : join &lt;- function(x, y) x + y join(x = 12, y = 12) ## [1] 24 do you see that as a user who hasnt written or even looked at the code its already hard for him to understand what does x and y stands for. Only to get an error like this. join(x = &quot;mtcars&quot;, y = &quot;iris&quot;) ## Error in x + y: non-numeric argument to binary operator I know it is a stupid example but I see it every time in real code. When you only need numeric values why not include that information in the parameter name. something like: join &lt;- function(num_x, num_y) num_x + num_y It may not seem like much but this small change makes the life of the user so much better where he doesnt need to consult the documentation again and again. Their are other ways you can come up with sensible names in your code just to avoid this issue. Its a standard practice during code review to check the names and these names are never allowed in production environment. We will discuss more about names in another chapter but for now understand that parameter names are just as important as the name of the function and it should be meaningful and easier to understand. There should be some information buried in the name. 4.6 use tryCatch During deployment we would not like the shiny app or rest api or the chron job to fail. Its not a good experience to have for either the developer or the client. Best way to avoid it is wrap every function in a tryCatch block and log the errors. This way if you app has some bugs ( which every app does ). It will not crash and not destroy the experience of all the other people using it. Lets bring back the foo function : foo &lt;- function( x, y ){ tryCatch( expr = { return( x + y ) }, error = function(e){ print( sprintf(&quot;An error occurred in foo at %s : %s&quot;, Sys.time(), e) ) }) } foo(&quot;mtcars&quot;, &quot;iris&quot;) ## [1] &quot;An error occurred in foo at 2021-03-23 15:51:11 : Error in x + y: non-numeric argument to binary operator\\n&quot; Now imagine this line to be printed in a json file or inserted in a database with time stamp and other information instead of crashing the entire code only a particular functionality will not run which is huge. This is the difference between staying late on Saturday night to fix a bug vs telling them that I will fix it on Monday. To me that is big enough. 4.7 Write simple and unique functions Task of one function should be to do one thing and one thing only. There are numerous times when people assume they have written excellent code because everything is in a function. Purpose of a function is to reduce one unique task in a single line. If your function does multiple things then its a good Idea to Break your function into multiple one and then create a function which uses all of them. average_func &lt;- function( mult_params ){ tryCatch( expr = { ### # code to do stuff 1 ### ### # code to do stuff 2 ### }, error = function(e){ ### # code to log errors ### }) } Now imagine if today you are logging on a json file and tomorrow client wants to log it into a database. Changing it on every function is not only time consuming but dangerous in terms that now you can break the code. Now compare that to this code. stuff_1 &lt;- function(params_1){ ### # code to do stuff 1 ### } stuff_2 &lt;- function(params_2){ ### # code to do stuff 1 ### } log_func &lt;- function( log_params){ ### # code to log errors ### } best_func &lt;- function( mult_params ){ tryCatch( expr = { stuff_1() stuff_2() }, error = function(e){ log_func() }) } Here in this code every function has a clear responsibility and the main function is just a composite of multiple unique functions and it will be very easy to debug this code or change the functionality entirely. 4.8 Conclusion In this chapter we discussed the best practices for writing functions in R. Here are the key takeaways from the chapter. write information about the function at top of it. avoid global variable and pass everything through parameters use return statement to end your function keep consistency in return types of a function use logical names for parameter use tryCatch in every function functions are supposed to do one thing and one thing only "],["names.html", "Chapter 5 Naming Conventions 5.1 Popular naming conventions 5.2 Informative Names 5.3 Conclusions", " Chapter 5 Naming Conventions This chapter is crucial only for people to understand what are the bad naming practices we the R users have acquired over the years because of flexibility in the language. These names we give to the data or variables are not valid outside or R community and thus are subject to code reviews. You may even be asked to change name before deploying the code in production. The more bad naming practices the more time it takes you to fix them. Its a good practice to know the best practices for naming things in general. 5.1 Popular naming conventions There are 3 most famous naming conventions in programming community. They are used throughout the code in big projects to smaller ones. These are : 5.1.1 camelCase These names start with small letter and every subsequent word will start with upperCase letter like my name in camelCase would be written as vikramSinghRawat. All the functions in SHINY are camelCase. Its a great example of camelCase naming conventions. 5.1.2 PascalCase PascalCase is just like camel case but the only difference is the first letter is also UpperCase. My name would be written as VikramSinghRawat. 5.1.3 snake_case These names are all lower case with underscore between the name. My name in snake_case would be vikram_singh_rawat. TIDYVERSE is a great example of snake_cases. I really like the naming conventions of packages like stringi and quanteda. whenever you start a project you should choose one of the naming conventions for the entire team. So that no matter who writes the code there is a logical consistency in the names and anybody can predict the next letter. In many projects that I have worked camelCase were chosen for naming variables and PascalCase for methods or functions. I came to know later that this is a style many programming languages choose. Infact in langauges like golang if you write snake_cases linter will ask you to correct the name. But for SQL and R I would highly recommend snake_cases as many databases like postgres dont allow capital cases in column names you have to surround names in quotes if you need to use uppercase letters. In R tidyverse has gained huge momentum and now all the packages are following suite. Apart from that if your package can even tell what datatype are you working on that is a huge add on. Packages like stringi and quanteda are excellent example of this. And I would like to add no matter what you choose Please never include dot in any name. Thats a practice valid for only R code and it too is not accepted anywhere apart from R programming language. Overall choose a naming convention for a project and stick to it or ask your client if they have a preference on it. This saves you from trouble of code reviews. 5.2 Informative Names I may sound like a tidyverse fanboy ( I am not) but classes and data types in R are quite opaque so names of functions and objects should reflect precisely what they represent. There is no harm in using names with data-types before them # int_currency &lt;- 1:10 # chr_letters &lt;- letters # dt_mtcars &lt;- data.table::data.table(mtcars) # tbl_mtcars &lt;- tibble::tibble(mtcars) Above advice may be more useful for package developers but it can be used in broad scenarios even on a project where there are multiple working on a same project. If I know what datatype I am dealing with I dont have to go through the entire code and working on top of it becomes that much easier. You can use more descriptive names without data types in the beginning for your projects. Names like data, mainData, dummyVar, tempList etc.. should never be used in a project. Use more descriptive names like sales_data_2020, api_token, rate_of_interest etc 5.3 Conclusions Proper naming conventions will help collaboration in big teams and it makes the code easier to maintain. We should all strive for better names in the code. Its the hardest job to come up with new and unique names for a variable everytime you create one but this is the difference between an average programmer and a good one. Choose a naming convention and stick to it Dont include dots ( . ) in names Use informative names "],["envManagement.html", "Chapter 6 Environment Management 6.1 renv for package management 6.2 config for external dependencies 6.3 Conclusion", " Chapter 6 Environment Management If you create a product today be it an API or Shiny App or Even a normal R-script. One thing you cant be sure of is to update the packages or the version of R. There are companies where you can not access different version of a package because multiple projects are relying on the same copy of the package. Its hard to update your package in these companies and you will need to get permissions from top admins to do so. Thus its better to rely on as less packages as possible and that too on the popular ones. But even after you have created a code you would want to keep a record of all the packages and their version as it is for that particular project. This is where environments come in handy. 6.1 renv for package management There was a package called Packrat a few years ago I would have suggested you to use that always. But currently there is a package I have been using for over a year now by name renv. It does everything that you need to recreate your environment anywhere else. Basically you need to activate the package in your project. By using this command. renv::activate() Then take a snapshot of current project where it will record a list of all the packages used in your project by this command. renv::snapshot() and When you want to reproduce it on a docker container or a remote machine or any place else. You would simple need to run. renv::restore() and it generates a lock file with all the information about a project including the version or R and the versions of the packages used so at any time you can recreate the entire environment again. I could give you multiple ways of tackling the same problem. But this book is about the best possible one so this is it. You just need to use this package to solve almost all of your problems. 6.2 config for external dependencies There is a package called config that allows you to read yaml format in R. That is a standard practice to keep all the Credentials, tokens, API keys etc.. in a config file. There are many other ways you can secure credentials and everything but config is easiest amongst them all and you can use it for storing all the parameters and external path variables that your code requires. It could be an address to external file storage or anything else. Its good to keep all the variable your code requires outside the main code so that when you need to update them you dont need to change the entire code itself. Below is a snippet of config file from one of my project. default: datawarehouse: driver: Postgres server: localhost uid: postgres pwd: postgres port: 5432 database: master dockerdatabase: driver: Postgres server: postgres_plum uid: postgres pwd: postgres port: 5432 database: master filestructure: logfile: &quot;logs/logs.csv&quot; as you can see I havent only kept the passwords and user names but external files as well. Tomorrow if I have to change the logging file I will just have to update it here without opening any R code. It removes so much burden on reading the code again and again. Use it whenever possible. 6.3 Conclusion This chapter doesnt discuss much on concepts but the takeaways from the chapter are: Use renv for all the project you plan to maintain or keep for long term Use config to manage all the external dependencies your project have or might have "],["types.html", "Chapter 7 Type System", " Chapter 7 Type System "],["reference.html", "Chapter 8 Pass By Value-Reference", " Chapter 8 Pass By Value-Reference "],["loops.html", "Chapter 9 For Loops", " Chapter 9 For Loops "],["multithreading.html", "Chapter 10 Multithreading", " Chapter 10 Multithreading "],["Vectorize.html", "Chapter 11 Vectorize", " Chapter 11 Vectorize "],["bench.html", "Chapter 12 Benchmarking", " Chapter 12 Benchmarking "],["packages.html", "Chapter 13 packages", " Chapter 13 packages "],["syntax.html", "Chapter 14 Docker", " Chapter 14 Docker "],["proxy.html", "Chapter 15 Proxy Server", " Chapter 15 Proxy Server "],["cloud.html", "Chapter 16 Cloud Services", " Chapter 16 Cloud Services "],["shinyspeed.html", "Chapter 17 Speed", " Chapter 17 Speed "],["shinymemory.html", "Chapter 18 Memory", " Chapter 18 Memory "]]
